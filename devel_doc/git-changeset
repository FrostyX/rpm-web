#!/usr/bin/python3

import argparse
import json
import os
import subprocess
import sys

from common import shell


# Parse args
parser = argparse.ArgumentParser(
    description='Print GitHub PR belonging to given refname.')
parser.add_argument('refname', type=str, help='git refname')
parser.add_argument('-r', '--refresh', action='store_true',
                    help='always fetch from server (do not use cache)')
parser.add_argument('-q', '--quiet', action='store_true',
                    help='do not print progress messages on stderr')
args = parser.parse_args()

# Set variables
GIT_DIR = shell('git rev-parse --path-format=absolute --git-common-dir')
NUMBER_DIR = '{}/changeset/numbers'.format(GIT_DIR)
COMMIT_HASH = shell('git rev-parse {}'.format(args.refname))
COMMIT_DIR = '{}/changeset/commits/{}'.format(GIT_DIR, COMMIT_HASH[:2])
COMMIT_PATH = '{}/{}'.format(COMMIT_DIR, COMMIT_HASH[2:])
URL = 'https://github.com/rpm-software-management/rpm/pull/{}'
if os.path.islink(COMMIT_PATH):
    DATA_PATH = os.path.abspath(os.path.join(COMMIT_DIR,
                                             os.readlink(COMMIT_PATH)))
else:
    DATA_PATH = COMMIT_PATH

# Fetch and cache entry if needed
if args.refresh or not os.path.exists(DATA_PATH):
    # Fetch data
    if not args.quiet:
        sys.stderr.write('Fetching changeset for commit {}\n'.format(COMMIT_HASH))
    data = shell('gh pr list --state merged --limit 1 --json '
                 'number,title,url,labels --search {}'.format(COMMIT_HASH))
    data = json.loads(data)
    os.makedirs(COMMIT_DIR, exist_ok=True)
    if not data:
        with open(COMMIT_PATH, 'w') as f:
            f.write('')
        sys.exit(1)
    assert len(data) >= 1
    data = data[0]

    # Create entry
    number = data['number']
    title = data['title']
    labels = sorted(x['name'] for x in data['labels'])
    if 'release' in labels:
        entry = ''
    else:
        entry = '{}\n{}'.format(title, ' '.join(labels))
    number_path = '{}/{}'.format(NUMBER_DIR, number)

    # Write entry to cache
    os.makedirs(NUMBER_DIR, exist_ok=True)
    with open(number_path, 'w') as f:
        f.write(entry)
    if os.path.exists(COMMIT_PATH):
        os.unlink(COMMIT_PATH)
    os.symlink('../../numbers/{}'.format(number), COMMIT_PATH)

# Print entry if cached
if os.path.islink(COMMIT_PATH):
    number = os.path.basename(os.readlink(COMMIT_PATH))
    with open(COMMIT_PATH) as f:
        entry = list(map(str.strip, f.readlines()))
    if not entry:
        sys.exit(1)
    print('PR #{}: {}'.format(number, entry[0]))
    if len(entry) == 2:
        print(entry[1])
    else:
        print()
    print(URL.format(number))
else:
    sys.exit(1)
